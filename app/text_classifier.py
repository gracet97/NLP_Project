# -*- coding: utf-8 -*-
"""Text Classifier

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g3SVk0zROVX0WRUXugQPFf_NAJc4azDW

Using https://www.kdnuggets.com/2018/03/simple-text-classifier-google-colaboratory.html 

and https://buomsoo-kim.github.io/colab/2018/04/16/Importing-files-from-Google-Drive-in-Google-Colab.md/ to load in full data file
"""

#Upload file
import pandas as pd
import io

uploaded = files.upload()

df = pd.read_csv(io.StringIO(uploaded['essays.csv'].decode('utf-8-sig')), header=0)

#
essays = df['TEXT']
cEXT = df['cEXT']
cNEU = df['cNEU']
cAGR = df['cAGR']
cCON = df['cCON']
cOPN = df['cOPN']

import nltk
nltk.download('stopwords'), nltk.download('porter_test')

#Text PreProcessing Function Creation
stop_words = nltk.corpus.stopwords.words('english')
ps = nltk.PorterStemmer()

import re
def pre_process(txt):
    z = re.sub("[^a-zA-Z]",  " ",  str(txt))
    z = re.sub(r'[^\w\d\s]', ' ', z)
    z = re.sub(r'\s+', ' ', z)
    z = re.sub(r'^\s+|\s+?$', '', z.lower())
    return ' '.join(ps.stem(term) 
        for term in z.split()
        if term not in set(stop_words)
    )

#Processing
processed_essays = essays.apply(pre_process)

#Creating Unigram & Bigram Vectors
from sklearn.feature_extraction.text import TfidfVectorizer

vectorizer = TfidfVectorizer(ngram_range=(1,2))

X_ngrams = vectorizer.fit_transform(processed_essays)

#Train/Test Split & Running the Classifer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

big5 = [cEXT, cNEU, cAGR, cCON, cOPN]
models = {}

for item in big5:
  X_train, X_test, y_train, y_test = train_test_split(X_ngrams, item, test_size = 0.2, stratify = item)
  models["clf" + str(item.name)] = LogisticRegression()
  models["clf" + str(item.name)].fit(X_train, y_train)

def true_or_false_a(message):
  if models["clfcEXT"].predict(vectorizer.transform([pre_process(message)])):
    return 'TRUE'
  else:
     return 'FALSE'

def true_or_false_b(message):
  if models["clfcNEU"].predict(vectorizer.transform([pre_process(message)])):
    return 'TRUE'
  else:
    return 'FALSE'

def true_or_false_c(message):
  if models["clfcAGR"].predict(vectorizer.transform([pre_process(message)])):
    return 'TRUE'
  else:
    return 'FALSE'

def true_or_false_d(message):
  if models["clfcCON"].predict(vectorizer.transform([pre_process(message)])):
    return 'TRUE'
  else:
    return 'FALSE'

def true_or_false_e(message):
  if models["clfcOPN"].predict(vectorizer.transform([pre_process(message)])):
    return 'TRUE'
  else:
    return 'FALSE'

#
uploaded = files.upload()
data = uploaded['1item.txt']
data_decode = data.decode("utf-8") 
d = {'TEXT': data_decode, 'cEXT': [0], 'cNEU': [0], 'cAGR' : [0], 'cCON' : [0], 'cOPN' : [0]}
toBeClassified = pd.DataFrame(data = d)

toBeClassified['cEXT'] = toBeClassified['TEXT'].apply(true_or_false_a)
toBeClassified['cNEU'] = toBeClassified['TEXT'].apply(true_or_false_b)
toBeClassified['cAGR'] = toBeClassified['TEXT'].apply(true_or_false_c)
toBeClassified['cCON'] = toBeClassified['TEXT'].apply(true_or_false_d)
toBeClassified['cOPN'] = toBeClassified['TEXT'].apply(true_or_false_e)

toBeClassified.to_csv('newfile.csv', index = None, header = True)
files.download('newfile.csv')

